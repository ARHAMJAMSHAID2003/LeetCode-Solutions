
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        // Handle the case where head is nullptr
        if (head == nullptr) {
            return nullptr;
        }

        // Remove any initial nodes that match val
        while (head != nullptr && head->val == val) {
            ListNode* temp = head;
            head = head->next;
            delete temp;
        }

        // Use curr and prev to traverse the list and remove elements with the given value
        ListNode* curr = head;
        ListNode* prev = nullptr;
        
        while (curr != nullptr) {
            if (curr->val == val) {
                ListNode* temp1 = curr;
                if (prev != nullptr) {
                    prev->next = curr->next;
                
                curr = curr->next;
                delete temp1;
                }
            } else {
                prev = curr;
                curr = curr->next;
            }
        }

        return head;
    }
};
