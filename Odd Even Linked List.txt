class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }

        ListNode* odd = head;        // Pointer for odd-indexed nodes
        ListNode* even = head->next; // Pointer for even-indexed nodes
        ListNode* evenHead = even;   // Save the head of even list

        // Separate odd and even indexed nodes
        while (even != nullptr && even->next != nullptr) {
            odd->next = even->next;  // Link odd to the next odd-indexed node
            odd = odd->next;         // Move odd to the next odd node
            even->next = odd->next;  // Link even to the next even-indexed node
            even = even->next;       // Move even to the next even node
        }

        odd->next = evenHead; // Connect the end of odd list to the head of even list

        return head;
    }
};
